/* This file was generated by SableCC (http://www.sablecc.org/). */

package rm.parser;

import rm.lexer.*;
import rm.node.*;
import rm.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ADefProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ACompProgram */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AEndProgram */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce ADef */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AComp */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AParlstParlst */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AEmptyParlst */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AIdentPars */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ACommaPars */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AComplexexprExpr */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ASimpleexprExpr */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ACondisRelcomp */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce ACondRelcomp */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce ARelexpr */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce ATermSmplexpr */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce AAddSmplexpr */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce AFactorTerm */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list, false);
            }
            break;
            case 17: /* reduce AMultTerm */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AParFactor */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce AIntFactor */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce ANegatetypeFactor */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce ARealFactor */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AIdentFactor */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AArgsArglst */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce AEmptyArglst */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AExprArgs */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce AListargsArgs */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce APlusAddop */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce AMinusAddop */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce AMultMulop */
            {
                ArrayList<Object> list = new29();
                push(goTo(14), list, false);
            }
            break;
            case 30: /* reduce ADivMulop */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AIntegermodMulop */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce ALshiftMulop */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce ARshiftMulop */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce ALessthanRelop */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce ALessorequalRelop */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AEqualRelop */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce ANotequalRelop */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce AGreaterequalRelop */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list, false);
            }
            break;
            case 39: /* reduce AGreaterRelop */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list, false);
            }
            break;
            case 40: /* reduce AEmpty */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ADefProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PDef pdefNode2;
        PProgram pprogramNode3;
        pdefNode2 = (PDef)nodeArrayList1.get(0);
        pprogramNode3 = (PProgram)nodeArrayList2.get(0);

        pprogramNode1 = new ADefProgram(pdefNode2, pprogramNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ACompProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PComp pcompNode2;
        PProgram pprogramNode3;
        pcompNode2 = (PComp)nodeArrayList1.get(0);
        pprogramNode3 = (PProgram)nodeArrayList2.get(0);

        pprogramNode1 = new ACompProgram(pcompNode2, pprogramNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AEndProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        TEndsym tendsymNode2;
        tendsymNode2 = (TEndsym)nodeArrayList1.get(0);

        pprogramNode1 = new AEndProgram(tendsymNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDef pdefNode1;
        {
            // Block
        TLetsym tletsymNode2;
        TIdent tidentNode3;
        PParlst pparlstNode4;
        TAssignsym tassignsymNode5;
        PExpr pexprNode6;
        TSemicolonsym tsemicolonsymNode7;
        tletsymNode2 = (TLetsym)nodeArrayList1.get(0);
        tidentNode3 = (TIdent)nodeArrayList2.get(0);
        pparlstNode4 = (PParlst)nodeArrayList3.get(0);
        tassignsymNode5 = (TAssignsym)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);
        tsemicolonsymNode7 = (TSemicolonsym)nodeArrayList6.get(0);

        pdefNode1 = new ADef(tletsymNode2, tidentNode3, pparlstNode4, tassignsymNode5, pexprNode6, tsemicolonsymNode7);
        }
	nodeList.add(pdefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComp pcompNode1;
        {
            // Block
        PExpr pexprNode2;
        TQuestionsym tquestionsymNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tquestionsymNode3 = (TQuestionsym)nodeArrayList2.get(0);

        pcompNode1 = new AComp(pexprNode2, tquestionsymNode3);
        }
	nodeList.add(pcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AParlstParlst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParlst pparlstNode1;
        {
            // Block
        TLparsym tlparsymNode2;
        PPars pparsNode3;
        TRparsym trparsymNode4;
        tlparsymNode2 = (TLparsym)nodeArrayList1.get(0);
        pparsNode3 = (PPars)nodeArrayList2.get(0);
        trparsymNode4 = (TRparsym)nodeArrayList3.get(0);

        pparlstNode1 = new AParlstParlst(tlparsymNode2, pparsNode3, trparsymNode4);
        }
	nodeList.add(pparlstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AEmptyParlst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParlst pparlstNode1;
        {
            // Block
        PEmpty pemptyNode2;
        pemptyNode2 = (PEmpty)nodeArrayList1.get(0);

        pparlstNode1 = new AEmptyParlst(pemptyNode2);
        }
	nodeList.add(pparlstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIdentPars */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPars pparsNode1;
        {
            // Block
        TIdent tidentNode2;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);

        pparsNode1 = new AIdentPars(tidentNode2);
        }
	nodeList.add(pparsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ACommaPars */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPars pparsNode1;
        {
            // Block
        PPars pparsNode2;
        TCommasym tcommasymNode3;
        TIdent tidentNode4;
        pparsNode2 = (PPars)nodeArrayList1.get(0);
        tcommasymNode3 = (TCommasym)nodeArrayList2.get(0);
        tidentNode4 = (TIdent)nodeArrayList3.get(0);

        pparsNode1 = new ACommaPars(pparsNode2, tcommasymNode3, tidentNode4);
        }
	nodeList.add(pparsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AComplexexprExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIfsym tifsymNode2;
        PRelcomp prelcompNode3;
        TThensym tthensymNode4;
        PExpr pexprNode5;
        TElsesym telsesymNode6;
        PExpr pexprNode7;
        tifsymNode2 = (TIfsym)nodeArrayList1.get(0);
        prelcompNode3 = (PRelcomp)nodeArrayList2.get(0);
        tthensymNode4 = (TThensym)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        telsesymNode6 = (TElsesym)nodeArrayList5.get(0);
        pexprNode7 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AComplexexprExpr(tifsymNode2, prelcompNode3, tthensymNode4, pexprNode5, telsesymNode6, pexprNode7);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ASimpleexprExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PSmplexpr psmplexprNode2;
        psmplexprNode2 = (PSmplexpr)nodeArrayList1.get(0);

        pexprNode1 = new ASimpleexprExpr(psmplexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACondisRelcomp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelcomp prelcompNode1;
        {
            // Block
        PRelcomp prelcompNode2;
        TCondis tcondisNode3;
        PRelexpr prelexprNode4;
        prelcompNode2 = (PRelcomp)nodeArrayList1.get(0);
        tcondisNode3 = (TCondis)nodeArrayList2.get(0);
        prelexprNode4 = (PRelexpr)nodeArrayList3.get(0);

        prelcompNode1 = new ACondisRelcomp(prelcompNode2, tcondisNode3, prelexprNode4);
        }
	nodeList.add(prelcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ACondRelcomp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelcomp prelcompNode1;
        {
            // Block
        PRelexpr prelexprNode2;
        prelexprNode2 = (PRelexpr)nodeArrayList1.get(0);

        prelcompNode1 = new ACondRelcomp(prelexprNode2);
        }
	nodeList.add(prelcompNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ARelexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelexpr prelexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PRelop prelopNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        prelopNode3 = (PRelop)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        prelexprNode1 = new ARelexpr(pexprNode2, prelopNode3, pexprNode4);
        }
	nodeList.add(prelexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ATermSmplexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSmplexpr psmplexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        psmplexprNode1 = new ATermSmplexpr(ptermNode2);
        }
	nodeList.add(psmplexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAddSmplexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSmplexpr psmplexprNode1;
        {
            // Block
        PSmplexpr psmplexprNode2;
        PAddop paddopNode3;
        PTerm ptermNode4;
        psmplexprNode2 = (PSmplexpr)nodeArrayList1.get(0);
        paddopNode3 = (PAddop)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        psmplexprNode1 = new AAddSmplexpr(psmplexprNode2, paddopNode3, ptermNode4);
        }
	nodeList.add(psmplexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AFactorTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        ptermNode1 = new AFactorTerm(pfactorNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        PMulop pmulopNode3;
        PFactor pfactorNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        pmulopNode3 = (PMulop)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, pmulopNode3, pfactorNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AParFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLparsym tlparsymNode2;
        PExpr pexprNode3;
        TRparsym trparsymNode4;
        tlparsymNode2 = (TLparsym)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparsymNode4 = (TRparsym)nodeArrayList3.get(0);

        pfactorNode1 = new AParFactor(tlparsymNode2, pexprNode3, trparsymNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AIntFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIntdenotation tintdenotationNode2;
        tintdenotationNode2 = (TIntdenotation)nodeArrayList1.get(0);

        pfactorNode1 = new AIntFactor(tintdenotationNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ANegatetypeFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TMinussym tminussymNode2;
        PFactor pfactorNode3;
        tminussymNode2 = (TMinussym)nodeArrayList1.get(0);
        pfactorNode3 = (PFactor)nodeArrayList2.get(0);

        pfactorNode1 = new ANegatetypeFactor(tminussymNode2, pfactorNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ARealFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TRealdenotation trealdenotationNode2;
        trealdenotationNode2 = (TRealdenotation)nodeArrayList1.get(0);

        pfactorNode1 = new ARealFactor(trealdenotationNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIdentFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TIdent tidentNode2;
        PArglst parglstNode3;
        tidentNode2 = (TIdent)nodeArrayList1.get(0);
        parglstNode3 = (PArglst)nodeArrayList2.get(0);

        pfactorNode1 = new AIdentFactor(tidentNode2, parglstNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AArgsArglst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArglst parglstNode1;
        {
            // Block
        TLparsym tlparsymNode2;
        PArgs pargsNode3;
        TRparsym trparsymNode4;
        tlparsymNode2 = (TLparsym)nodeArrayList1.get(0);
        pargsNode3 = (PArgs)nodeArrayList2.get(0);
        trparsymNode4 = (TRparsym)nodeArrayList3.get(0);

        parglstNode1 = new AArgsArglst(tlparsymNode2, pargsNode3, trparsymNode4);
        }
	nodeList.add(parglstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AEmptyArglst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArglst parglstNode1;
        {
            // Block
        PEmpty pemptyNode2;
        pemptyNode2 = (PEmpty)nodeArrayList1.get(0);

        parglstNode1 = new AEmptyArglst(pemptyNode2);
        }
	nodeList.add(parglstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AExprArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pargsNode1 = new AExprArgs(pexprNode2);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AListargsArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgs pargsNode1;
        {
            // Block
        PArgs pargsNode2;
        TCommasym tcommasymNode3;
        PExpr pexprNode4;
        pargsNode2 = (PArgs)nodeArrayList1.get(0);
        tcommasymNode3 = (TCommasym)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pargsNode1 = new AListargsArgs(pargsNode2, tcommasymNode3, pexprNode4);
        }
	nodeList.add(pargsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce APlusAddop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TPlussym tplussymNode2;
        tplussymNode2 = (TPlussym)nodeArrayList1.get(0);

        paddopNode1 = new APlusAddop(tplussymNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AMinusAddop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddop paddopNode1;
        {
            // Block
        TMinussym tminussymNode2;
        tminussymNode2 = (TMinussym)nodeArrayList1.get(0);

        paddopNode1 = new AMinusAddop(tminussymNode2);
        }
	nodeList.add(paddopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AMultMulop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TTimessym ttimessymNode2;
        ttimessymNode2 = (TTimessym)nodeArrayList1.get(0);

        pmulopNode1 = new AMultMulop(ttimessymNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ADivMulop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TDivsym tdivsymNode2;
        tdivsymNode2 = (TDivsym)nodeArrayList1.get(0);

        pmulopNode1 = new ADivMulop(tdivsymNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIntegermodMulop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TImodsym timodsymNode2;
        timodsymNode2 = (TImodsym)nodeArrayList1.get(0);

        pmulopNode1 = new AIntegermodMulop(timodsymNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ALshiftMulop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TLshiftsym tlshiftsymNode2;
        tlshiftsymNode2 = (TLshiftsym)nodeArrayList1.get(0);

        pmulopNode1 = new ALshiftMulop(tlshiftsymNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ARshiftMulop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMulop pmulopNode1;
        {
            // Block
        TRshiftsym trshiftsymNode2;
        trshiftsymNode2 = (TRshiftsym)nodeArrayList1.get(0);

        pmulopNode1 = new ARshiftMulop(trshiftsymNode2);
        }
	nodeList.add(pmulopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ALessthanRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TLesssym tlesssymNode2;
        tlesssymNode2 = (TLesssym)nodeArrayList1.get(0);

        prelopNode1 = new ALessthanRelop(tlesssymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ALessorequalRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TLseqsym tlseqsymNode2;
        tlseqsymNode2 = (TLseqsym)nodeArrayList1.get(0);

        prelopNode1 = new ALessorequalRelop(tlseqsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEqualRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TEqualsym tequalsymNode2;
        tequalsymNode2 = (TEqualsym)nodeArrayList1.get(0);

        prelopNode1 = new AEqualRelop(tequalsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ANotequalRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TNoteqsym tnoteqsymNode2;
        tnoteqsymNode2 = (TNoteqsym)nodeArrayList1.get(0);

        prelopNode1 = new ANotequalRelop(tnoteqsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AGreaterequalRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TGreqsym tgreqsymNode2;
        tgreqsymNode2 = (TGreqsym)nodeArrayList1.get(0);

        prelopNode1 = new AGreaterequalRelop(tgreqsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AGreaterRelop */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelop prelopNode1;
        {
            // Block
        TGrtrsym tgrtrsymNode2;
        tgrtrsymNode2 = (TGrtrsym)nodeArrayList1.get(0);

        prelopNode1 = new AGreaterRelop(tgrtrsymNode2);
        }
	nodeList.add(prelopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AEmpty */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PEmpty pemptyNode1;
        {
            // Block

        pemptyNode1 = new AEmpty();
        }
	nodeList.add(pemptyNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 1}, {1, SHIFT, 1}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 2}, {1, SHIFT, 1}, {13, SHIFT, 2}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 3}, {27, SHIFT, 20}, },
			{{-1, ERROR, 4}, {1, SHIFT, 1}, {13, SHIFT, 2}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 40}, {17, SHIFT, 22}, },
			{{-1, ERROR, 9}, {28, ACCEPT, -1}, },
			{{-1, ERROR, 10}, {1, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 11}, {1, SHIFT, 1}, {13, SHIFT, 2}, {16, SHIFT, 3}, {17, SHIFT, 4}, {19, SHIFT, 5}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 12}, {24, SHIFT, 27}, },
			{{-1, REDUCE, 10}, {0, SHIFT, 28}, {1, SHIFT, 29}, },
			{{-1, REDUCE, 14}, {2, SHIFT, 31}, {3, SHIFT, 32}, {4, SHIFT, 33}, {10, SHIFT, 34}, {11, SHIFT, 35}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 17}, {5, SHIFT, 37}, {6, SHIFT, 38}, {7, SHIFT, 39}, {8, SHIFT, 40}, {9, SHIFT, 41}, {22, SHIFT, 42}, },
			{{-1, ERROR, 18}, {12, SHIFT, 44}, {14, SHIFT, 45}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 40}, {17, SHIFT, 46}, },
			{{-1, ERROR, 21}, {18, SHIFT, 49}, },
			{{-1, ERROR, 22}, {1, SHIFT, 1}, {13, SHIFT, 2}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 30}, {1, SHIFT, 1}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 36}, {1, SHIFT, 1}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 43}, {1, SHIFT, 1}, {13, SHIFT, 2}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 44}, {1, SHIFT, 1}, {13, SHIFT, 2}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 45}, {1, SHIFT, 1}, {13, SHIFT, 2}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 46}, {27, SHIFT, 57}, },
			{{-1, ERROR, 47}, {23, SHIFT, 59}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 51}, {18, SHIFT, 60}, {20, SHIFT, 61}, },
			{{-1, REDUCE, 15}, {2, SHIFT, 31}, {3, SHIFT, 32}, {4, SHIFT, 33}, {10, SHIFT, 34}, {11, SHIFT, 35}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 56}, {15, SHIFT, 62}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 58}, {18, SHIFT, 63}, {20, SHIFT, 64}, },
			{{-1, ERROR, 59}, {1, SHIFT, 1}, {13, SHIFT, 2}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 61}, {1, SHIFT, 1}, {13, SHIFT, 2}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, ERROR, 62}, {1, SHIFT, 1}, {13, SHIFT, 2}, {17, SHIFT, 4}, {25, SHIFT, 6}, {26, SHIFT, 7}, {27, SHIFT, 8}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 64}, {27, SHIFT, 68}, },
			{{-1, ERROR, 65}, {21, SHIFT, 69}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 3}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 9}, {10, 25}, {11, 26}, },
			{{-1, 10}, },
			{{-1, 11}, },
			{{-1, 47}, },
			{{-1, 58}, },
			{{-1, 12}, {2, 17}, {4, 21}, {22, 50}, {43, 54}, {44, 17}, {45, 56}, {59, 65}, {61, 66}, {62, 67}, },
			{{-1, 18}, },
			{{-1, 19}, {44, 55}, },
			{{-1, 13}, },
			{{-1, 14}, {30, 52}, },
			{{-1, 15}, {1, 16}, {36, 53}, },
			{{-1, 23}, },
			{{-1, 51}, },
			{{-1, 30}, },
			{{-1, 36}, },
			{{-1, 43}, },
			{{-1, 24}, {20, 48}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '-', 'IF', 'LET', '(', '.', intdenotation, realdenotation, ident",
			"expecting: '-', '(', intdenotation, realdenotation, ident",
			"expecting: '-', 'IF', '(', intdenotation, realdenotation, ident",
			"expecting: ident",
			"expecting: EOF",
			"expecting: '+', '-', '*', '%', '/', '<', '<=', '!=', '>=', '>', '<<', '>>', condis, 'THEN', 'ELSE', ')', ',', ';', '==', '?'",
			"expecting: '+', '-', '*', '%', '/', '<', '<=', '!=', '>=', '>', '<<', '>>', condis, 'THEN', 'ELSE', '(', ')', ',', ';', '==', '?'",
			"expecting: '?'",
			"expecting: '+', '-', '<', '<=', '!=', '>=', '>', condis, 'THEN', 'ELSE', ')', ',', ';', '==', '?'",
			"expecting: '<', '<=', '!=', '>=', '>', '=='",
			"expecting: condis, 'THEN'",
			"expecting: '(', '='",
			"expecting: ')'",
			"expecting: '='",
			"expecting: ')', ','",
			"expecting: 'ELSE'",
			"expecting: ';'",
			"expecting: '<', '<=', '!=', '>=', '>', condis, 'THEN', 'ELSE', ')', ',', ';', '==', '?'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 2, 4, 5, 5, 6, 4, 0, 0, 7, 8, 5, 5, 5, 9, 10, 10, 11, 12, 2, 5, 5, 4, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 13, 13, 5, 14, 14, 5, 5, 10, 10, 15, 14, 14, 2, 5, 2, 2, 13, 3, 16, 14, 17, 14, 0, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
