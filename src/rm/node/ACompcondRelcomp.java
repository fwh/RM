/* This file was generated by SableCC (http://www.sablecc.org/). */

package rm.node;

import rm.analysis.*;

@SuppressWarnings("nls")
public final class ACompcondRelcomp extends PRelcomp
{
    private PRelcomp _p1_;
    private TCondop _condop_;
    private PRelexpr _p2_;

    public ACompcondRelcomp()
    {
        // Constructor
    }

    public ACompcondRelcomp(
        @SuppressWarnings("hiding") PRelcomp _p1_,
        @SuppressWarnings("hiding") TCondop _condop_,
        @SuppressWarnings("hiding") PRelexpr _p2_)
    {
        // Constructor
        setP1(_p1_);

        setCondop(_condop_);

        setP2(_p2_);

    }

    @Override
    public Object clone()
    {
        return new ACompcondRelcomp(
            cloneNode(this._p1_),
            cloneNode(this._condop_),
            cloneNode(this._p2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACompcondRelcomp(this);
    }

    public PRelcomp getP1()
    {
        return this._p1_;
    }

    public void setP1(PRelcomp node)
    {
        if(this._p1_ != null)
        {
            this._p1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._p1_ = node;
    }

    public TCondop getCondop()
    {
        return this._condop_;
    }

    public void setCondop(TCondop node)
    {
        if(this._condop_ != null)
        {
            this._condop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condop_ = node;
    }

    public PRelexpr getP2()
    {
        return this._p2_;
    }

    public void setP2(PRelexpr node)
    {
        if(this._p2_ != null)
        {
            this._p2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._p2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._p1_)
            + toString(this._condop_)
            + toString(this._p2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._p1_ == child)
        {
            this._p1_ = null;
            return;
        }

        if(this._condop_ == child)
        {
            this._condop_ = null;
            return;
        }

        if(this._p2_ == child)
        {
            this._p2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._p1_ == oldChild)
        {
            setP1((PRelcomp) newChild);
            return;
        }

        if(this._condop_ == oldChild)
        {
            setCondop((TCondop) newChild);
            return;
        }

        if(this._p2_ == oldChild)
        {
            setP2((PRelexpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
