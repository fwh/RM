/* This file was generated by SableCC (http://www.sablecc.org/). */

package rm.node;

import rm.analysis.*;

@SuppressWarnings("nls")
public final class ANegMonadexpr extends PMonadexpr
{
    private TMinussym _minussym_;
    private PSimplefactor _simplefactor_;

    public ANegMonadexpr()
    {
        // Constructor
    }

    public ANegMonadexpr(
        @SuppressWarnings("hiding") TMinussym _minussym_,
        @SuppressWarnings("hiding") PSimplefactor _simplefactor_)
    {
        // Constructor
        setMinussym(_minussym_);

        setSimplefactor(_simplefactor_);

    }

    @Override
    public Object clone()
    {
        return new ANegMonadexpr(
            cloneNode(this._minussym_),
            cloneNode(this._simplefactor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANegMonadexpr(this);
    }

    public TMinussym getMinussym()
    {
        return this._minussym_;
    }

    public void setMinussym(TMinussym node)
    {
        if(this._minussym_ != null)
        {
            this._minussym_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minussym_ = node;
    }

    public PSimplefactor getSimplefactor()
    {
        return this._simplefactor_;
    }

    public void setSimplefactor(PSimplefactor node)
    {
        if(this._simplefactor_ != null)
        {
            this._simplefactor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simplefactor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._minussym_)
            + toString(this._simplefactor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._minussym_ == child)
        {
            this._minussym_ = null;
            return;
        }

        if(this._simplefactor_ == child)
        {
            this._simplefactor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._minussym_ == oldChild)
        {
            setMinussym((TMinussym) newChild);
            return;
        }

        if(this._simplefactor_ == oldChild)
        {
            setSimplefactor((PSimplefactor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
